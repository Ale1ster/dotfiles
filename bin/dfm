#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper;
use FindBin qw($Bin);
use Getopt::Long;

my %opts;
GetOptions( \%opts, 'verbose', 'quiet', 'dry-run' );

INFO( "Installing dotfiles..." . ( $opts{'dry-run'} ? ' (dry run)' : '' ) );

DEBUG("Running in [$Bin] and installing in [$ENV{HOME}]");

my $repo_dir = $Bin;
$repo_dir =~ s/$ENV{HOME}\///;
$repo_dir =~ s/\/bin//;

DEBUG("Repo dir: $repo_dir");

# isntall main files
install_files( $ENV{HOME} . '/' . $repo_dir,
    $ENV{HOME}, [qw(.git .gitignore .ssh README.md)] );

# install files in the .ssh directory
install_files(
    $ENV{HOME} . '/' . $repo_dir . '/.ssh',
    $ENV{HOME} . '/.ssh',
    ['.gitignore']
);

# link in the bash loader
configure_bash_loader();

exit;

# a couple of log4perl-alikes
sub INFO {
    printf "INFO: %s\n", shift if !$opts{quiet};
}

sub DEBUG {
    printf "DEBUG: %s\n", shift if $opts{verbose};
}

# function to install files
sub install_files {
    my ( $from_dir, $to_dir, $initial_skips ) = @_;
    $initial_skips ||= [];

    my $backup_dir = $to_dir . '/.backup';
    DEBUG("Backup dir: $backup_dir");

    chdir($to_dir);

    # build up skip list
    my $skip_files = { map { $_ => 1 } @$initial_skips };
    if ( -e "$from_dir/skip" ) {
        open( my $skip_fh, '<', "$from_dir/skip" );
        foreach my $line (<$skip_fh>) {
            chomp($line);
            $skip_files->{$line} = 1;
        }
        close($skip_fh);
        $skip_files->{skip} = 1;

        DEBUG("Skipped file: $_") for keys %$skip_files;
    }

    if ( !-e $backup_dir ) {
        DEBUG("Creating $backup_dir");
        mkdir($backup_dir) if !$opts{'dry-run'};
    }

    my $dirh;
    opendir $dirh, $from_dir;
    foreach my $direntry ( readdir($dirh) ) {

        # skip current and parent
        next if $direntry eq '.' or $direntry eq '..';

        # skip any other files
        next if $skip_files->{$direntry};

        DEBUG(" Working on $direntry");

        if ( !-l $direntry ) {
            if ( -e $direntry ) {
                INFO("  Backing up $direntry.");
                system("mv $direntry $backup_dir/$direntry")
                    if !$opts{'dry-run'};
            }
            INFO("  Symlinking $direntry.");
            symlink( "$from_dir/$direntry", "$direntry" )
                if !$opts{'dry-run'};
        }
    }
}

sub configure_bash_loader {
    chdir( $ENV{HOME} );

    my $bashrc_contents;
    {
        local $/ = undef;
        if ( open( my $bashrc_in, '<', ".bashrc" ) ) {
            $bashrc_contents = <$bashrc_in>;
            close $bashrc_in;
        }
        else {
            $bashrc_contents = '';
        }
    }

    # check if the loader is in
    # previous incarnations used .bashrc.nate
    if ( $bashrc_contents =~ /\.bashrc\.nate/ ) {
        INFO("Correcting loader in .bashrc");
        $bashrc_contents =~ s/\.bashrc\.nate/\.bashrc\.load/;
    }
    elsif ( $bashrc_contents !~ /\.bashrc\.load/ ) {
        INFO("Appending loader to .bashrc");
        $bashrc_contents .= "\n. \$HOME/.bashrc.load\n";
    }

    if ( !$opts{'dry-run'} ) {
        open( my $bashrc_out, '>', ".bashrc" );
        print $bashrc_out $bashrc_contents;
        close $bashrc_out;
    }
}
